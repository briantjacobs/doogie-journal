import org.jsoup.Jsoup
import java.security.MessageDigest

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "io.ratpack:ratpack-gradle:0.9.4"
        classpath "org.jsoup:jsoup:1.7.3"
    }
}

configurations { compress }

repositories {
    jcenter()
    maven { url "http://repo.springsource.org/repo" } // for springloaded
}

apply plugin: "ratpack-groovy"
apply plugin: "idea"

dependencies {
    compile ratpack.dependency("jackson")
    compile "org.mongodb:mongo-java-driver:2.11.4"
    compile "org.mongodb.morphia:morphia:0.107"
    compile "org.twitter4j:twitter4j-core:4.0.1"
    springloaded "org.springsource.loaded:springloaded:1.1.5.RELEASE"
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
    compress "com.yahoo.platform.yui:yuicompressor:2.4.7"
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.12'
}

task processAssets(type: ProcessAssetsTask) {
    sourceIndexFile = file("src/ratpack/public/index.html")
    watchDirectory = file("src/ratpack/public")

    destinationAssetDir = file("build/install/doogie/app/public")
    destinationIndexFile = file("build/install/doogie/app/public/index.html")
}

task buildApp {
    dependsOn clean, installApp, processAssets
}

class ProcessAssetsTask extends DefaultTask {

    private def document
    private File processedCssFile
    private File processedJsFile

    @InputFile File sourceIndexFile
    @InputDirectory File watchDirectory

    @OutputDirectory File destinationAssetDir
    @OutputFile File destinationIndexFile

    @TaskAction
    void processAssets() {
        document = Jsoup.parse(sourceIndexFile.text)
        String indexPath = sourceIndexFile.absolutePath - sourceIndexFile.name

        def jsFiles = document.select("script[src]").collect {
            "${indexPath}/${it.attr('src').value}"
        }

        def cssFiles = document.select("link").collect {
            "${indexPath}/${it.attr('href').value}"
        }

        processedJsFile = compress(ngMinify(combineAndHash(jsFiles)))
        processedCssFile = compress(combineAndHash(cssFiles))

        updateIndex()
    }


    private File combineAndHash(def files) {
        String content = ""
        String fileExtension = ""

        files.each {
            File file = new File(it)
            content += file.text + "\n"
            if (!fileExtension) {
                fileExtension = file.name.tokenize('.').last()
            }
        }

        Formatter hexHash = new Formatter()
        MessageDigest.getInstance("SHA-1").digest(content.bytes).each {
            b -> hexHash.format('%02x', b)
        }

        File destination = new File("${destinationAssetDir}/${hexHash}.${fileExtension}")
        destination.text = content

        return destination
    }

    private File ngMinify(File source) {
        project.exec {
            commandLine "ngmin", source.absolutePath, source.absolutePath
        }

        return source
    }

    private File compress(File source) {
        String fileExtension = source.name.tokenize('.').last()
        String compressedFileName = source.name.replace(fileExtension, "min.${fileExtension}")
        String compressedFilePath = "${destinationAssetDir}/${compressedFileName}"

        project.javaexec {
            classpath = project.configurations.compress
            main = 'com.yahoo.platform.yui.compressor.YUICompressor'
            args = ["-o", "${compressedFilePath}", source.absolutePath]
        }

        source.delete()

        return new File(compressedFilePath)
    }

    private void updateIndex() {
        destinationIndexFile.delete()
        destinationIndexFile.createNewFile()

        document.select("script[src], link").each { it.remove() }

        String relativePath = destinationIndexFile.toPath().parent.relativize(destinationAssetDir.toPath())
        relativePath = relativePath ? "${relativePath}/" : ""

        document.select("head").append("""
            <script src="${relativePath}${processedJsFile.name}" ></script>
            <link href="${relativePath}${processedCssFile.name}" rel="stylesheet" type="text/css" />
        """)

        destinationIndexFile.text = document.outerHtml()
    }

}